{"/home/travis/build/npmtest/node-npmtest-js2xmlparser/test.js":"/* istanbul instrument in package npmtest_js2xmlparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-js2xmlparser/lib.npmtest_js2xmlparser.js":"/* istanbul instrument in package npmtest_js2xmlparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_js2xmlparser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_js2xmlparser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-js2xmlparser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-js2xmlparser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_js2xmlparser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_js2xmlparser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_js2xmlparser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_js2xmlparser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_js2xmlparser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_js2xmlparser.__dirname + '/lib.npmtest_js2xmlparser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-js2xmlparser/node_modules/js2xmlparser/lib/main.js":"\"use strict\";\n/**\n * Copyright (C) 2016-2017 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar xmlcreate_1 = require(\"xmlcreate\");\nvar options_1 = require(\"./options\");\nvar utils_1 = require(\"./utils\");\n/**\n * Parses a string into XML.\n *\n * @param str The string to parse into XML.\n * @param parentElement The XML element or attribute that will contain the\n *                      string.\n * @param options Options for parsing the string into XML.\n *\n * @private\n */\nfunction parseString(str, parentElement, options) {\n    var requiresCdata = function (s) {\n        return (options.cdataInvalidChars && (s.indexOf(\"<\") !== -1\n            || s.indexOf(\"&\") !== -1))\n            || options.cdataKeys.indexOf(parentElement.name) !== -1\n            || options.cdataKeys.indexOf(\"*\") !== -1;\n    };\n    if (parentElement instanceof xmlcreate_1.XmlElement) {\n        if (requiresCdata(str)) {\n            var cdataStrs = str.split(\"]]>\");\n            for (var i = 0; i < cdataStrs.length; i++) {\n                if (requiresCdata(cdataStrs[i])) {\n                    parentElement.cdata(cdataStrs[i]);\n                }\n                else {\n                    parentElement.charData(cdataStrs[i]);\n                }\n                if (i < cdataStrs.length - 1) {\n                    parentElement.charData(\"]]>\");\n                }\n            }\n        }\n        else {\n            parentElement.charData(str);\n        }\n    }\n    else {\n        parentElement.text(str);\n    }\n}\n/**\n * Parses an attribute into XML.\n *\n * @param name The name of the attribute.\n * @param value The value of the attribute.\n * @param parentElement The XML element that will contain the string.\n * @param options Options for parsing the attribute into XML.\n *\n * @private\n */\nfunction parseAttribute(name, value, parentElement, options) {\n    var attribute = parentElement.attribute(name, \"\");\n    if (utils_1.isPrimitive(value)) {\n        parseString(utils_1.stringify(value), attribute, options);\n    }\n    else {\n        throw new Error(\"attribute value for name '\" + name + \"' should be a\"\n            + \" primitive (string, number, boolean, null, or\"\n            + \" undefined)\");\n    }\n}\n/**\n * Parses an object or Map entry into XML.\n *\n * @param key The key associated with the object or Map entry.\n * @param value The object or map entry.\n * @param parentElement The XML element that will contain the object or map\n *                      entry.\n * @param options Options for parsing the object or map entry into XML.\n *\n * @private\n */\nfunction parseObjectOrMapEntry(key, value, parentElement, options) {\n    // Alias key\n    if (key === options.aliasString) {\n        if (!utils_1.isString(value)) {\n            throw new Error(\"aliasString value for \" + value\n                + \" should be a string\");\n        }\n        parentElement.name = value;\n        return;\n    }\n    // Attributes key\n    if (key.indexOf(options.attributeString) === 0) {\n        if (utils_1.isObject(value)) {\n            for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {\n                var subkey = _a[_i];\n                parseAttribute(subkey, value[subkey], parentElement, options);\n            }\n        }\n        else {\n            throw new Error(\"attributes object for \" + key + \" should be an\"\n                + \" object\");\n        }\n        return;\n    }\n    // Value key\n    if (key.indexOf(options.valueString) === 0) {\n        if (utils_1.isPrimitive(value)) {\n            parseValue(key, value, parentElement, options);\n            return;\n        }\n        else {\n            throw new Error(\"value \" + value + \" should be a primitive\"\n                + \" (string, number, boolean, null, or undefined)\");\n        }\n    }\n    // Standard handling (create new element for entry)\n    var element = parentElement;\n    if (!utils_1.isArray(value) && !utils_1.isSet(value)) {\n        element = parentElement.element(key);\n    }\n    parseValue(key, value, element, options);\n}\n/**\n * Parses an Object or Map into XML.\n *\n * @param objectOrMap The object or map to parse into XML.\n * @param parentElement The XML element that will contain the object.\n * @param options Options for parsing the object into XML.\n *\n * @private\n */\nfunction parseObjectOrMap(objectOrMap, parentElement, options) {\n    if (utils_1.isMap(objectOrMap)) {\n        objectOrMap.forEach(function (value, key) {\n            parseObjectOrMapEntry(utils_1.stringify(key), value, parentElement, options);\n        });\n    }\n    else {\n        for (var _i = 0, _a = Object.keys(objectOrMap); _i < _a.length; _i++) {\n            var key = _a[_i];\n            parseObjectOrMapEntry(key, objectOrMap[key], parentElement, options);\n        }\n    }\n}\n/**\n * Parses an array or Set into XML.\n *\n * @param key The key associated with the array or set to parse into XML.\n * @param arrayOrSet The array or set to parse into XML.\n * @param parentElement The XML element that will contain the function.\n * @param options Options for parsing the array or set into XML.\n *\n * @private\n */\nfunction parseArrayOrSet(key, arrayOrSet, parentElement, options) {\n    var arrayNameFunc;\n    if (options.wrapHandlers.hasOwnProperty(\"*\")) {\n        arrayNameFunc = options.wrapHandlers[\"*\"];\n    }\n    if (options.wrapHandlers.hasOwnProperty(key)) {\n        arrayNameFunc = options.wrapHandlers[key];\n    }\n    var arrayKey = key;\n    var arrayElement = parentElement;\n    if (!utils_1.isUndefined(arrayNameFunc)) {\n        var arrayNameFuncKey = arrayNameFunc(arrayKey, arrayOrSet);\n        if (utils_1.isString(arrayNameFuncKey)) {\n            arrayKey = arrayNameFuncKey;\n            arrayElement = parentElement.element(key);\n        }\n        else if (!utils_1.isNull(arrayNameFuncKey)) {\n            throw new Error(\"wrapHandlers function for \" + arrayKey\n                + \" should return a string or null\");\n        }\n    }\n    arrayOrSet.forEach(function (item) {\n        var element = arrayElement;\n        if (!utils_1.isArray(item) && !utils_1.isSet(item)) {\n            element = arrayElement.element(arrayKey);\n        }\n        parseValue(arrayKey, item, element, options);\n    });\n}\n/**\n * Parses an arbitrary JavaScript value into XML.\n *\n * @param key The key associated with the value to parse into XML.\n * @param value The value to parse into XML.\n * @param parentElement The XML element that will contain the value.\n * @param options Options for parsing the value into XML.\n *\n * @private\n */\nfunction parseValue(key, value, parentElement, options) {\n    // If a handler for a particular type is user-defined, use that handler\n    // instead of the defaults\n    var type = Object.prototype.toString.call(value);\n    var handler;\n    if (options.typeHandlers.hasOwnProperty(\"*\")) {\n        handler = options.typeHandlers[\"*\"];\n    }\n    if (options.typeHandlers.hasOwnProperty(type)) {\n        handler = options.typeHandlers[type];\n    }\n    if (!utils_1.isUndefined(handler)) {\n        value = handler(value);\n    }\n    if (utils_1.isObject(value) || utils_1.isMap(value)) {\n        parseObjectOrMap(value, parentElement, options);\n        return;\n    }\n    if (utils_1.isArray(value) || utils_1.isSet(value)) {\n        parseArrayOrSet(key, value, parentElement, options);\n        return;\n    }\n    parseString(utils_1.stringify(value), parentElement, options);\n}\n/**\n * Returns a XML document corresponding to the specified value.\n *\n * @param root The name of the root XML element. When the value is converted to\n *             XML, it will be a child of this root element.\n * @param value The value to convert to XML.\n * @param options Options for parsing the value into XML.\n *\n * @returns An XML document corresponding to the specified value.\n *\n * @private\n */\nfunction parseToDocument(root, value, options) {\n    var document = new xmlcreate_1.XmlDocument(root);\n    if (options.declaration.include) {\n        document.decl(options.declaration);\n    }\n    if (options.dtd.include) {\n        document.dtd(options.dtd.name, options.dtd.sysId, options.dtd.pubId);\n    }\n    parseValue(root, value, document.root(), options);\n    return document;\n}\n/**\n * Returns a XML string representation of the specified object.\n *\n * @param root The name of the root XML element. When the object is converted\n *             to XML, it will be a child of this root element.\n * @param object The object to convert to XML.\n * @param options Options for parsing the object and formatting the resulting\n *                XML.\n *\n * @returns An XML string representation of the specified object.\n */\nfunction parse(root, object, options) {\n    var opts = new options_1.Options(options);\n    var document = parseToDocument(root, object, opts);\n    return document.toString(opts.format);\n}\nexports.parse = parse;\n","/home/travis/build/npmtest/node-npmtest-js2xmlparser/node_modules/js2xmlparser/lib/options.js":"/**\n * Copyright (C) 2016 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\nvar utils_1 = require(\"./utils\");\n/**\n * Implementation of the IOptions interface used to provide default values\n * to fields.\n *\n * @private\n */\nvar Options = (function () {\n    function Options(options) {\n        if (options === void 0) { options = {}; }\n        this.aliasString = \"=\";\n        this.attributeString = \"@\";\n        this.cdataInvalidChars = false;\n        this.cdataKeys = [];\n        this.valueString = \"#\";\n        if (!utils_1.isObject(options)) {\n            throw new TypeError(\"options should be an Object or undefined\");\n        }\n        if (!utils_1.isString(options.aliasString)) {\n            if (!utils_1.isUndefined(options.aliasString)) {\n                throw new TypeError(\"options.aliasString should be a string or\"\n                    + \" undefined\");\n            }\n        }\n        else {\n            this.aliasString = options.aliasString;\n        }\n        if (!utils_1.isString(options.attributeString)) {\n            if (!utils_1.isUndefined(options.attributeString)) {\n                throw new TypeError(\"options.attributeString should be a string\"\n                    + \" or undefined\");\n            }\n        }\n        else {\n            this.attributeString = options.attributeString;\n        }\n        if (!utils_1.isBoolean(options.cdataInvalidChars)) {\n            if (!utils_1.isUndefined(options.cdataInvalidChars)) {\n                throw new TypeError(\"options.cdataInvalidChars should be a\"\n                    + \" boolean or undefined\");\n            }\n        }\n        else {\n            this.cdataInvalidChars = options.cdataInvalidChars;\n        }\n        if (!utils_1.isStringArray(options.cdataKeys)) {\n            if (!utils_1.isUndefined(options.cdataKeys)) {\n                throw new TypeError(\"options.cdataKeys should be an Array or\" +\n                    \" undefined\");\n            }\n        }\n        else {\n            this.cdataKeys = options.cdataKeys;\n        }\n        this.declaration = new DeclarationOptions(options.declaration);\n        this.dtd = new DtdOptions(options.dtd);\n        this.format = new FormatOptions(options.format);\n        this.typeHandlers = new TypeHandlers(options.typeHandlers);\n        if (!utils_1.isString(options.valueString)) {\n            if (!utils_1.isUndefined(options.valueString)) {\n                throw new TypeError(\"options.valueString should be a string\"\n                    + \" or undefined\");\n            }\n        }\n        else {\n            this.valueString = options.valueString;\n        }\n        this.wrapHandlers = new WrapHandlers(options.wrapHandlers);\n    }\n    return Options;\n}());\nexports.Options = Options;\n/**\n * Implementation of the IDeclarationOptions interface used to provide default\n * values to fields.\n *\n * @private\n */\nvar DeclarationOptions = (function () {\n    function DeclarationOptions(declarationOptions) {\n        if (declarationOptions === void 0) { declarationOptions = {}; }\n        this.include = true;\n        if (!utils_1.isObject(declarationOptions)) {\n            throw new TypeError(\"options.declaration should be an Object or\"\n                + \" undefined\");\n        }\n        if (!utils_1.isBoolean(declarationOptions.include)) {\n            if (!utils_1.isUndefined(declarationOptions.include)) {\n                throw new TypeError(\"options.declaration.include should be a\"\n                    + \" boolean or undefined\");\n            }\n        }\n        else {\n            this.include = declarationOptions.include;\n        }\n        // Validation performed by xmlcreate\n        this.encoding = declarationOptions.encoding;\n        this.standalone = declarationOptions.standalone;\n        this.version = declarationOptions.version;\n    }\n    return DeclarationOptions;\n}());\nexports.DeclarationOptions = DeclarationOptions;\n/**\n * Implementation of the IDtdOptions interface used to provide default values\n * to fields.\n *\n * @private\n */\nvar DtdOptions = (function () {\n    function DtdOptions(dtdOptions) {\n        if (dtdOptions === void 0) { dtdOptions = {}; }\n        this.include = false;\n        if (!utils_1.isObject(dtdOptions)) {\n            throw new TypeError(\"options.dtd should be an Object or undefined\");\n        }\n        if (!utils_1.isBoolean(dtdOptions.include)) {\n            if (!utils_1.isUndefined(dtdOptions.include)) {\n                throw new TypeError(\"options.dtd.include should be a boolean\"\n                    + \" or undefined\");\n            }\n        }\n        else {\n            this.include = dtdOptions.include;\n        }\n        // Validation performed by xmlcreate\n        this.name = dtdOptions.name;\n        this.sysId = dtdOptions.sysId;\n        this.pubId = dtdOptions.pubId;\n    }\n    return DtdOptions;\n}());\nexports.DtdOptions = DtdOptions;\n/**\n * Implementation of the IFormatOptions interface used to provide default values\n * to fields.\n *\n * @private\n */\nvar FormatOptions = (function () {\n    function FormatOptions(formatOptions) {\n        if (formatOptions === void 0) { formatOptions = {}; }\n        if (!utils_1.isObject(formatOptions)) {\n            throw new TypeError(\"options.format should be an Object or\"\n                + \" undefined\");\n        }\n        // Validation performed by xmlcreate\n        this.doubleQuotes = formatOptions.doubleQuotes;\n        this.indent = formatOptions.indent;\n        this.newline = formatOptions.newline;\n        this.pretty = formatOptions.pretty;\n    }\n    return FormatOptions;\n}());\nexports.FormatOptions = FormatOptions;\n/**\n * Implementation of the ITypeHandlers interface used to provide default values\n * to fields.\n *\n * @private\n */\nvar TypeHandlers = (function () {\n    function TypeHandlers(typeHandlers) {\n        if (typeHandlers === void 0) { typeHandlers = {}; }\n        if (!utils_1.isObject(typeHandlers)) {\n            throw new TypeError(\"options.typeHandlers should be an Object or\"\n                + \" undefined\");\n        }\n        for (var key in typeHandlers) {\n            if (typeHandlers.hasOwnProperty(key)) {\n                if (!utils_1.isFunction(typeHandlers[key])) {\n                    throw new TypeError(\"options.typeHandlers['\" + key + \"']\" +\n                        \" should be a Function\");\n                }\n                else {\n                    this[key] = typeHandlers[key];\n                }\n            }\n        }\n    }\n    return TypeHandlers;\n}());\nexports.TypeHandlers = TypeHandlers;\n/**\n * Implementation of the IWrapHandlers interface used to provide default values\n * to fields.\n *\n * @private\n */\nvar WrapHandlers = (function () {\n    function WrapHandlers(wrapHandlers) {\n        if (wrapHandlers === void 0) { wrapHandlers = {}; }\n        if (!utils_1.isObject(wrapHandlers)) {\n            throw new TypeError(\"options.wrapHandlers should be an Object or\"\n                + \" undefined\");\n        }\n        for (var key in wrapHandlers) {\n            if (wrapHandlers.hasOwnProperty(key)) {\n                if (!utils_1.isFunction(wrapHandlers[key])) {\n                    throw new TypeError(\"options.wrapHandlers['\" + key + \"']\" +\n                        \" should be a Function\");\n                }\n                else {\n                    this[key] = wrapHandlers[key];\n                }\n            }\n        }\n    }\n    return WrapHandlers;\n}());\nexports.WrapHandlers = WrapHandlers;\n","/home/travis/build/npmtest/node-npmtest-js2xmlparser/node_modules/js2xmlparser/lib/utils.js":"/**\n * Copyright (C) 2016 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n/**\n * @private\n */\nfunction isString(val) {\n    return Object.prototype.toString.call(val) === \"[object String]\";\n}\nexports.isString = isString;\n/**\n * @private\n */\nfunction isNumber(val) {\n    return Object.prototype.toString.call(val) === \"[object Number]\";\n}\nexports.isNumber = isNumber;\n/**\n * @private\n */\nfunction isBoolean(val) {\n    return Object.prototype.toString.call(val) === \"[object Boolean]\";\n}\nexports.isBoolean = isBoolean;\n/**\n * @private\n */\nfunction isUndefined(val) {\n    return Object.prototype.toString.call(val) === \"[object Undefined]\";\n}\nexports.isUndefined = isUndefined;\n/**\n * @private\n */\nfunction isNull(val) {\n    return Object.prototype.toString.call(val) === \"[object Null]\";\n}\nexports.isNull = isNull;\n/**\n * @private\n */\nfunction isPrimitive(val) {\n    return isString(val)\n        || isNumber(val)\n        || isBoolean(val)\n        || isUndefined(val)\n        || isNull(val);\n}\nexports.isPrimitive = isPrimitive;\n/**\n * @private\n */\nfunction isObject(val) {\n    return Object.prototype.toString.call(val) === \"[object Object]\";\n}\nexports.isObject = isObject;\n/**\n * @private\n */\nfunction isArray(val) {\n    return Object.prototype.toString.call(val) === \"[object Array]\";\n}\nexports.isArray = isArray;\n/**\n * @private\n */\nfunction isStringArray(val) {\n    if (!isArray(val)) {\n        return false;\n    }\n    for (var _i = 0, val_1 = val; _i < val_1.length; _i++) {\n        var entry = val_1[_i];\n        if (!isString(entry)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isStringArray = isStringArray;\n/**\n * @private\n */\nfunction isFunction(val) {\n    return Object.prototype.toString.call(val) === \"[object Function]\";\n}\nexports.isFunction = isFunction;\n/**\n * @private\n */\nfunction isSet(val) {\n    return Object.prototype.toString.call(val) === \"[object Set]\";\n}\nexports.isSet = isSet;\n/**\n * @private\n */\nfunction isMap(val) {\n    return Object.prototype.toString.call(val) === \"[object Map]\";\n}\nexports.isMap = isMap;\n/**\n * Returns a string representation of the specified value, as given by the\n * value's toString() method (if it has one) or the global String() function\n * (if it does not).\n *\n * @param value The value to convert to a string.\n *\n * @returns A string representation of the specified value.\n *\n * @private\n */\nfunction stringify(value) {\n    if (!isUndefined(value) && !isNull(value)) {\n        if (!isFunction(value.toString)) {\n            value = value.toString();\n        }\n    }\n    return String(value);\n}\nexports.stringify = stringify;\n"}